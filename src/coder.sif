
_coder_base64_padding: u8 = '=';
_coder_base64_alphabet: [64]u8;
_coder_base64_indices: [256]i16;

// josh  hasn't yet fixed the 'bug' with 
//   array/struct literals in the global 
//   field  this  code  is temporary and 
//   will  be  fixed,  when josh updates
//   his language.
proc coder_init_globals() {
  _coder_base64_alphabet = .{
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
    'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 
    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 
    'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 
    'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 
    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 
    'w', 'x', 'y', 'z', '0', '1', '2', '3', 
    '4', '5', '6', '7', '8', '9', '+', '/', 
  };
  _coder_base64_indices = .{
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,62,  -1, -1, -1, 63,
    52, 53, 54, 55, 56, 57, 58, 59, 60,61,  -1, -1, -1, -1, -1, -1,
    -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
    -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  };
}

proc coder_to_base64(allocator: Allocator, bytes: []u8): []u8 {
  input_size: int = bytes.count;
  output_size: int;
  
  round_up_size: int = input_size;
  mod: int = round_up_size % 3;
  if(mod != 0) {
    round_up_size += 3 - mod;
  }
  assert(round_up_size % 3 == 0);
  output_size = round_up_size * 4 / 3;
  output : []u8 = new_slice(u8, output_size, allocator);
  
  source_index: = 0;
  target_index: = 0;
  remainder: = 0;
  
  for(;source_index+3 <= input_size; source_index += 3) {
    x: = cast(int, bytes[source_index+0]);
    y: = cast(int, bytes[source_index+1]);
    z: = cast(int, bytes[source_index+2]);
    output[target_index+0] = _coder_base64_alphabet[x >> 2];
    output[target_index+1] = _coder_base64_alphabet[(0x30 & (x << 4)) | (y >> 4)];
    output[target_index+2] = _coder_base64_alphabet[(0x3C & (y << 2)) | (z >> 6)];
    output[target_index+3] = _coder_base64_alphabet[0x3F & z];
    target_index += 4;
  }
  
  padding: int = 3 - (input_size - source_index);
  if(padding == 2) {
    x: = cast(int, bytes[source_index+0]);
    output[target_index+0] = _coder_base64_alphabet[x >> 2];
    output[target_index+1] = _coder_base64_alphabet[(0x30 & (x << 4))];
    output[target_index+2] = _coder_base64_padding;
    output[target_index+3] = _coder_base64_padding;
  }
  else if(padding == 1) {
    x: = cast(int, bytes[source_index+0]);
    y: = cast(int, bytes[source_index+1]);
    output[target_index+0] = _coder_base64_alphabet[x >> 2];
    output[target_index+1] = _coder_base64_alphabet[(0x30 & (x << 4)) | (y >> 4)];
    output[target_index+2] = _coder_base64_alphabet[(0x3C & (y << 2))];
    output[target_index+3] = _coder_base64_padding;
  }
  
  return output;
}

proc coder_is_base64(byte_string: []u8): bool {
  if(byte_string.count == 0) return true;
  if(byte_string.count % 4 != 0) return false;
  equal_count: int = 0;
  for(i: = 0; i < byte_string.count; i += 1) {
    c: = byte_string[i];
    valid: = false;
    if(_coder_base64_indices[cast(int,c)] == -1) {
      if(c == '=') {
        equal_count += 1;
        if(equal_count >= 3) return false;
        if(i < byte_string.count - 2) return false;
      }
      else return false;
    }
  }
  for(i: = byte_string.count - 1; i >= byte_string.count - equal_count; i -= 1) {
    if(byte_string[i] != '=') {
      return false;
    }
  }
  return true;
}

proc coder_from_base64(allocator: Allocator, base_64: []u8): []u8 {
  output_size: int = base_64.count / 4 * 3;
  if(base_64[base_64.count - 1] == _coder_base64_padding) output_size -= 1;
  if(base_64[base_64.count - 2] == _coder_base64_padding) output_size -= 1;
  
  output: []u8 = new_slice(u8, output_size, allocator);
  
  source_index: = 0;
  output_index: = 0;
  for(; source_index+4 < base_64.count; source_index += 4) {
    a: u8 = cast(u8, _coder_base64_indices[cast(int, base_64[source_index+0])]);
    b: u8 = cast(u8, _coder_base64_indices[cast(int, base_64[source_index+1])]);
    c: u8 = cast(u8, _coder_base64_indices[cast(int, base_64[source_index+2])]);
    d: u8 = cast(u8, _coder_base64_indices[cast(int, base_64[source_index+3])]);
    output[output_index+0] = (a << 2) | (b >> 4);
    output[output_index+1] = (0xF0 & (b << 4)) | (c >> 2);
    output[output_index+2] = (0xC0 & (c << 6)) | d;
    output_index += 3;
  }
  
  a: = _coder_base64_indices[cast(int, base_64[source_index+0])];
  b: = _coder_base64_indices[cast(int, base_64[source_index+1])];
  c: = _coder_base64_indices[cast(int, base_64[source_index+2])];
  d: = _coder_base64_indices[cast(int, base_64[source_index+3])];
  output[output_index+0] = cast(u8, (a << 2) | (b >> 4));
  if(c != -1) output[output_index+1] = cast(u8, (0xF0 & (b << 4)) | (c >> 2));
  if(d != -1) output[output_index+2] = cast(u8, (0xC0 & (c << 6)) | d);
  
  return output;
}

proc coder_to_md5(allocator: Allocator, to_md5: []u8): [16]u8 {
  
  input_length: = to_md5.count;
  padded_length: = input_length + 8;
  mod: = (padded_length)%64;
  if(mod != 0) {
    padded_length += 64 - mod;
  }
  
  padded_message: = new_slice(u8, padded_length, allocator);
  assert(padded_length % 64 == 0);
  assert(padded_length > 8);
  
  // TODO(bumbread): is there memcpy?
  for(i := 0; i < input_length; i += 1) {
    padded_message[i] = to_md5[i];
  }
  if(padded_length - (input_length + 8) >= 1) {
    padded_message[input_length] = 0x80;
  }
  cast(^i64, &padded_message[padded_length - 8])^ = 8*input_length;
  
  num_words: u32 = cast(u32, padded_length / 4);
  words: []u32 = slice_ptr(cast(^u32, &padded_message[0]), cast(i64, num_words));
  
  A: u32 = 0x67452301;
  B: u32 = 0xefcdab89;
  C: u32 = 0x98badcfe;
  D: u32 = 0x10325476;
  
  // TODO(bumbread): inline
  proc lrot(x: u32, n: u32): u32 { return (((x) << (n)) | ((x) >> (32-(n)))); }
  
  r: [64]u32= .{
    7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
    5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
    4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
    6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21
  };
  
  k: [64]u32 = .{
    0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
    0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
    0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
    0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
    0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
    0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
    0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
    0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
    0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
    0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
    0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
    0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
    0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
    0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
    0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
    0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
  };
  
  for(i: u32 = 0; i < num_words/16; i += 1) {
    block_start: u32 = 16*i;
    
    AA: = A;
    BB: = B;
    CC: = C;
    DD: = D;
    
    for(j: u32 = 0; j < 64; j += 1) {
      f: u32;
      g: u32;
      
      if(j < 16) {
        f = (BB & CC) | ((~BB) & DD);
        g = j;
      } else if(j < 32) {
        f = (DD & BB) | ((~DD) & CC);
        g = (5*j + 1) % 16;
      } else if(j < 48) {
        f = BB ~ CC ~ DD;
        g = (3*j + 5) % 16;
      } else {
        f = CC ~ (BB | (~DD));
        g = (7*j) % 16;
      }
      
      temp: u32 = DD;
      DD = CC;
      CC = BB;
      BB += lrot(AA + f + k[cast(i64,j)] + words[cast(i64, block_start + g)], r[cast(i64, j)]);
      AA = temp;
    }
    
    A += AA;
    B += BB;
    C += CC;
    D += DD;
    
  }
  
  delete_slice(words, allocator);
  hash_u8: [16]u8 = transmute([16]u8, new_slice(u8, 16, allocator));
  hash_u8[0] = cast(u8, A);
  hash_u8[1] = cast(u8, A>>8);
  hash_u8[2] = cast(u8, A>>16); 
  hash_u8[3] = cast(u8, A>>24);
  hash_u8[4] = cast(u8, B);
  hash_u8[5] = cast(u8, B>>8);
  hash_u8[6] = cast(u8, B>>16); 
  hash_u8[7] = cast(u8, B>>24);
  hash_u8[8] = cast(u8, C);
  hash_u8[9] = cast(u8, C>>8);
  hash_u8[10] = cast(u8, C>>16); 
  hash_u8[11] = cast(u8, C>>24);
  hash_u8[12] = cast(u8, D);
  hash_u8[13] = cast(u8, D>>8);
  hash_u8[14] = cast(u8, D>>16); 
  hash_u8[15] = cast(u8, D>>24);
  return hash_u8;
}
